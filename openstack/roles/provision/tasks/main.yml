---
- name: 
  debug:
    var: manageiq
  when: manageiq is defined

- name: launch an instance
  os_server:
    state: present
    auth:
      auth_url: "{{ osp_server }}"
      username: "{{ osp_user }}"
      password: "{{ osp_pass }}"
      project_name: "{{ osp_tenant }}"
    name: "{{ osp_instance_name }}"
    image: "{{ osp_image }}"
    key_name: "{{ osp_key }}"
    timeout: 200
    flavor: "{{ osp_flavor }}"
    security_groups: "{{ osp_security_group }}"
    network: private
    auto_ip: "{{ osp_floating_ip }}"
    wait: yes
    userdata: |
      #cloud-config
      ssh_authorized_keys:
        - "{{ osp_public_key }}"
  register: instance
  delegate_to: "{{ control_machine }}"

- name: add the public IP address as a fact
  set_fact:
    ansible_default_ipv4:
      address: "{{ instance.openstack.public_v4 }}"
    cacheable: True

- debug:
    msg: IP address is {{ ansible_default_ipv4.address }}

- name: create volumes
  os_volume:
    auth:
      auth_url: "{{ osp_server }}"
      username: "{{ osp_user }}"
      password: "{{ osp_pass }}"
      project_name: "{{ osp_tenant }}"
    state: present
    size: "{{ osp_volume_size }}"
    display_name: "{{ osp_instance_name }}-{{ osp_volume_name }}"
  delegate_to: "{{ control_machine }}"

- name: attach volumes  
  os_server_volume:
    auth:
      auth_url: "{{ osp_server }}"
      username: "{{ osp_user }}"
      password: "{{ osp_pass }}"
      project_name: "{{ osp_tenant }}"
    state: present    
    server: "{{ osp_instance_name }}"
    volume: "{{ osp_instance_name }}-{{ osp_volume_name }}"
  delegate_to: "{{ control_machine }}"
  
- name: Set the Provider URL
  set_fact:
    cf_provider_url: "{{ cf_server }}/api/providers/{{ cf_provider_id }}"

- name: update cloudforms provider
  uri:
    url: "{{ cf_provider_url }}"
    validate_certs: False
    method: POST
    user: "{{ cf_user }}"
    password: "{{ cf_pass }}"
    force_basic_auth: yes
    body_format: json
    body: { "action": "refresh" }
    status_code: 200
  register: refresh_task

- name: Set the task href
  set_fact:
    task_url: "{{ refresh_task.json.task_href }}"

- name:
  debug:
    var: task_url

- name: Wait for the provider refresh to end
  uri:
    url: "{{ task_url }}"
    method: GET
    validate_certs: False
    user: "{{ cf_user }}"
    password: "{{ cf_pass }}"
    force_basic_auth: yes    
    body_format: json
    status_code: 200
  register: task_result
  until: task_result.json.state == 'Finished' or task_result.json.status == 'Error'
  failed_when: task_result.json.status == 'Error'
  retries: "{{ cf_max_retries }}"
  delay: "{{ cf_retry_interval }}"

- name: Lookup instance href
  uri:
    url: "{{ cf_server }}/api/vms?filter[]=name={{ osp_instance_name }}&expand=resources"
    validate_certs: False
    method: GET
    user: "{{ cf_user }}"
    password: "{{ cf_pass }}"
    force_basic_auth: yes
    body_format: json
    body: { "action": "refresh" }
    status_code: 200
  register: instance_href

- name: Set the Service URL
  set_fact:
    svc_url: "/api/{{ manageiq.service }}"

- name: Initialize an empty list for vms
  set_fact:
    vms: []

- name: Append resource href to vms list
  set_fact:
    vms: "{{ vms }} + [ { 'href': svc_url, 'resource': { 'href': '/api/vms/{{ item.json.resources[0].id }}' } } ]"
  with_items: "{{ instance_href.results }}"

- debug: var=vms

- name: Register vms with the service
  uri:
    url: "{{ cf_server }}/api/services"
    validate_certs: False
    user: "{{ cf_user }}"
    password: "{{ cf_pass }}"
    force_basic_auth: yes
    body_format: json
    status_code: 200
    body:
      action: add_resource
      resources: "{{ vms }}"
    validate_certs: False
    status_code: 200
  register: output

- debug: var=output.json.results[0].success

- name: Check if the VM was successfully attached to service
  fail: msg="{{ output.json.results[0].message }}"
  when: output.json.results[0].success == false

